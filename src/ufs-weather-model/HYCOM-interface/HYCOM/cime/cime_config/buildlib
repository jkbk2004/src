#!/usr/bin/env python

"""
build ufsatm library
"""
import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.case import Case
from CIME.utils import run_cmd, expect, safe_copy
from CIME.build import get_standard_makefile_args
import six

logger = logging.getLogger(__name__)


def _create_dir_structure(srcdir,targetdir, sourcemods=None):
    """
    Reproduce the directory structure of srcdir in targetdir with
    links to the files of srcdir.  If a sourcemods dir is provided and
    a file in the source tree matchs a file in the sourcemods directory
    link the sourcemods file instead
    """
    structure_updated = False
    for dirpath, _, filenames in os.walk(srcdir):
        structure = targetdir + dirpath[len(srcdir):]
        if not os.path.isdir(structure):
            os.mkdir(structure)
        for fname in filenames:
            # ignore some files
            if fname.startswith('.') or fname.startswith('#') or fname.startswith('~'):
                continue
            newfullpath = os.path.join(structure,fname)
            if sourcemods and os.path.isfile(os.path.join(sourcemods,fname)):
                # If file exists in case sourcemods use it
                linkto = os.path.join(sourcemods,fname)
            else:
                # otherwise link original file
                linkto = os.path.join(dirpath,fname)

            # Broken link or link to wrong path - remove it
            if (os.path.lexists(newfullpath) and not os.path.exists(newfullpath)) or \
               (os.path.exists(newfullpath) and not os.path.samefile(linkto,newfullpath)):
                os.unlink(newfullpath)
            # Create new link
            if not os.path.exists(newfullpath):
                os.symlink(linkto, newfullpath)
                structure_updated = True
    return structure_updated

###############################################################################
#pylint: disable=unused-argument
def buildlib(caseroot, libroot, bldroot):
###############################################################################

    with Case(caseroot) as case:
        # Retrieve variables
        srcroot = case.get_value("SRCROOT")
        objroot = case.get_value("OBJROOT")
        casetools = case.get_value("CASETOOLS")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")
        gmake_args = get_standard_makefile_args(case)
        mach = case.get_value("MACH")

        # Query components, standalone vs. coupled
        compclasses = case.get_value("COMP_CLASSES").split(",")
        compclasses.remove("CPL")
        ncomp = len(compclasses)
        
        # Create Filepath file
        filepath_file = os.path.join(bldroot,"Filepath")
        if not os.path.isfile(filepath_file):
            paths = [os.path.join(caseroot,"SourceMods","src.hycom"),
                     os.path.join(srcroot,"src","model","HYCOM")]
            if ncomp != 1:
                paths.append(os.path.join(srcroot,"src","model","HYCOM","NUOPC"))

            with open(filepath_file, "w") as filepath:
                filepath.write("\n".join(paths))
                filepath.write("\n")

        # List of source files that will be removed from the Srcfiles
        # NOTE: hycom_cice.F90 and mod_OICPL.F90 is only required to couple HYCOM with CICE
        remove_files = []
        remove_files.append("hycom_cice.F90")
        remove_files.append("mod_OICPL.F90")

        # Set user defined CPP options
        compclasses = case.get_value("COMP_CLASSES").split(",")
        compclasses.remove("CPL")
        ncomp = len(compclasses)
        if (ncomp == 1):
            os.environ["USER_CPPDEFS"] = " -DIA32 -DREAL8 -DMPI -DENDIAN_IO -DNAN2003 -DTIMER -DRELO -DEOS_SIG2 -DEOS_17T"
        else:
            remove_files.append("hycom.F90")
            compatm = case.get_value("COMP_ATM")
            os.environ["USER_CPPDEFS"] = " -DIA32 -DREAL8 -DMPI -DENDIAN_IO -DNAN2003 -DTIMER -DRELO -DEOS_SIG2 -DEOS_17T -DESPC_COUPLE"

        # Create command
        makefile = os.path.join(casetools, "Makefile")
        complib = os.path.join(libroot,"libocn.a")
        incroot = ""
        cmd = "{} Srcfiles -j {} MODEL=hycom COMPLIB={} -f {} USER_INCLDIR=\"{}\" {}" .format(gmake, gmake_j, complib, makefile, incroot, gmake_args)

        # Generate Srcfiles
        rc, out, err = run_cmd(cmd, verbose=True)
        logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n"%(cmd,out,err))

        # Remove files from Srcfiles, listed in remove_files, rc is not checked here on purpose beacuse it exits
        with open(os.path.join(objroot,"ocn","obj","Srcfiles"), "r+") as f:
            d = f.readlines()
            f.seek(0)
            for i in d:
                if i.rstrip() not in remove_files:
                    f.write(i)
                f.truncate() 

        # Build the library
        cmd = "{} complib -j {} MODEL=hycom COMPLIB={} -f {} USER_INCLDIR=\"{}\" {}" .format(gmake, gmake_j, complib, makefile, incroot, gmake_args)
        rc, out, err = run_cmd(cmd)
        logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n"%(cmd,out,err))
        expect(rc == 0, "Command %s failed with rc=%s" % (cmd, rc))

def _main_func():
    caseroot, libroot, bldroot = parse_input(sys.argv)
    buildlib(caseroot, libroot, bldroot)

###############################################################################

if __name__ == "__main__":
    _main_func()
