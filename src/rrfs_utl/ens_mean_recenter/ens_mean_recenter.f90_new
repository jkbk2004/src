PROGRAM ens_mean_recenter
!
!   PRGMMR: Ming Hu          ORG: GSL        DATE: 2022-02-11
!
! ABSTRACT: 
!     This appllication calculates ensemble mean and recenter
! 
! PROGRAM HISTORY LOG:
!
!   variable list
!
! USAGE:
!
! REMARKS:
!
! ATTRIBUTES:
!
!$$$
!
!_____________________________________________________________________

  use mpi
  use module_ncfile_stat, only : ncfile_stat
  use module_mpi_arrange, only : mpi_io_arrange

  use netcdf, only: nf90_open,nf90_close,nf90_get_var,nf90_noerr
  use netcdf, only: nf90_nowrite
  use netcdf, only: nf90_inq_varid


  implicit none
! 
  type(ncfile_stat) :: ncfs_dyn,ncfs_tracer,ncfs_sfc
  type(mpi_io_arrange) :: mpiioarg
!
! MPI variables
  integer :: npe, mype, mypeLocal,ierror
!
! namelist
  integer :: fv3_io_layout_y
  character(len=80)   :: sfcfile
  character(len=80)   :: tracerfile
  character(len=80)   :: dynfile
  character(len=80)   :: filebase
  character(len=80)   :: filename
  character(len=180)  :: varlist_sfc
  character(len=180)  :: varlist_tracer
  character(len=180)  :: varlist_dyn
  integer :: numvar_sfc
  integer :: numvar_tracer
  integer :: numvar_dyn
  integer :: num_ensemble
  namelist/setup/ num_ensemble,fv3_io_layout_y, &
                  sfcfile,numvar_sfc,varlist_sfc,&
                  tracerfile,numvar_tracer,varlist_tracer,&
                  dynfile,numvar_dyn,varlist_dyn
  logical :: ifexist
!
! MPI distribution array
  character(len=80)   :: filelist(3)
!
  integer :: mype_fileid
  character(len=20) :: mype_varname
  integer :: mype_vartype
  integer :: mype_nx,mype_ny
  integer :: mype_lbegin,mype_lend
!
! array
  integer :: mype_nz
  real(4),allocatable :: tmpd3r4(:,:,:,:)
  real(8),allocatable :: tmpd3r8(:,:,:)

  real(4),allocatable :: d3r4_mean(:,:,:)
  real(4),allocatable :: d4r4(:,:,:,:)
  integer :: startloc(4)
  integer :: countloc(4)
  integer :: ncioid,var_id
!
!
  integer :: i,j,k,iret,ilev,iens
  real :: average
!
!**********************************************************************
!**********************************************************************
!
!            END OF DECLARATIONS....start of program

! MPI setup
  call MPI_INIT(ierror)
  call MPI_COMM_SIZE(mpi_comm_world,npe,ierror)
  call MPI_COMM_RANK(mpi_comm_world,mype,ierror)

!
!  get namelist
!
  num_ensemble=1
  fv3_io_layout_y=1
  sfcfile="sfc_data.nc"
  numvar_sfc=0
  varlist_sfc="2mt"
  tracerfile="fv3sar_tile1"
  filebase="fv3sar_tile1"
  numvar_tracer=13
  varlist_tracer="sphum liq_wat ice_wat rainwat snowwat graupel water_nc ice_nc rain_nc o3mr liq_aero ice_aero sgs_tke"
  dynfile="fv3sar_tile1"
  numvar_dyn=7
  varlist_dyn="u v W DZ T delp phis"

  inquire(file='namelist.ens', EXIST=ifexist )
  if(ifexist) then
    open(10,file='namelist.ens',status='old')
       read(10,setup)
    close(10)
  else
     write(*,*) 'No namelist file exist, use default values'
  endif

  if(mype==0) then
    write(*,*) 'Namelist setup are:'
    write(*,setup)
  endif

  filelist(1)='dynvar'
  filelist(2)='tracer'
  filelist(3)='sfc'
  average=1.0/float(num_ensemble)
!
  if(mype==0) then
!
! find dimension of each field
!
     tracerfile=trim(filebase)//'_tracer'
     call ncfs_tracer%init(trim(tracerfile),numvar_tracer,trim(varlist_tracer))
     call ncfs_tracer%fill_dims()
     dynfile=trim(filebase)//'_dynvar'
     call ncfs_dyn%init(trim(dynfile),numvar_dyn,trim(varlist_dyn))
     call ncfs_dyn%fill_dims()
     sfcfile=trim(filebase)//'_sfc'
     call ncfs_sfc%init(trim(sfcfile),numvar_sfc,trim(varlist_sfc))
     call ncfs_sfc%fill_dims()
!
!  distibute variables to each core
!
     call mpiioarg%init(npe)
     call mpiioarg%arrange(ncfs_dyn,ncfs_tracer,ncfs_sfc)
         
     call ncfs_tracer%close()
     call ncfs_dyn%close()
     call ncfs_sfc%close()
  endif

  call MPI_Scatter(mpiioarg%fileid, 1, mpi_integer, mype_fileid, 1, mpi_integer, 0, MPI_COMM_WORLD,ierror)
  call MPI_Scatter(mpiioarg%varname, 20, mpi_character, mype_varname, 20, mpi_character, 0, MPI_COMM_WORLD,ierror)
  call MPI_Scatter(mpiioarg%vartype, 1, mpi_integer, mype_vartype, 1, mpi_integer, 0, MPI_COMM_WORLD,ierror)
  call MPI_Scatter(mpiioarg%nx, 1, mpi_integer, mype_nx, 1, mpi_integer, 0, MPI_COMM_WORLD,ierror)
  call MPI_Scatter(mpiioarg%ny, 1, mpi_integer, mype_ny, 1, mpi_integer, 0, MPI_COMM_WORLD,ierror)
  call MPI_Scatter(mpiioarg%lvlbegin, 1, mpi_integer, mype_lbegin, 1, mpi_integer, 0, MPI_COMM_WORLD,ierror)
  call MPI_Scatter(mpiioarg%lvlend, 1, mpi_integer, mype_lend, 1, mpi_integer, 0, MPI_COMM_WORLD,ierror)

  if(mype==0) call mpiioarg%close()

!  if(mype==0) write(*,*) 
  call mpi_barrier(MPI_COMM_WORLD,ierror)
!  write(6,'(2I5,2x,a10,10I10)') mype+1,mype_fileid,mype_varname,mype_vartype,mype_nx,mype_ny,mype_lbegin,mype_lend

  if(mype_fileid > 0) then
     mype_nz=mype_lend-mype_lbegin+1
     if(mype_vartype==5) then
        allocate(tmpd3r4(mype_nx,mype_ny,mype_nz,1))
     elseif(mype_vartype==6) then
        allocate(tmpd3r8(mype_nx,mype_ny,mype_nz))
     else
        write(6,*) 'Warning, unknown datatype'
     endif
     allocate(d3r4_mean(mype_nx,mype_ny,mype_lbegin:mype_lend))
     allocate(d4r4(mype_nx,mype_ny,mype_lbegin:mype_lend,num_ensemble))

! now read in each fields from fv3 file

     d3r4_mean=0.0
     d4r4=0.0
     do iens=1,num_ensemble
        write(filename,'(a,a,I3.3,a,a)') trim(filebase),'_mem',iens,'_',trim(filelist(mype_fileid))
        write(*,*) mype,trim(filename)
        iret=nf90_open(trim(filename),nf90_nowrite,ncioid,comm=mpi_comm_world,info=MPI_INFO_NULL)
        if(iret/=nf90_noerr) then
           write(6,*)' problem opening ', trim(filename),', Status =',iret
           call flush(6)
           stop(333)
        endif
        if(mype==0) write(*,*) 'reading ensemble member =',iens,trim(filename)

        !do ilev=mype_lbegin,mype_lend
        mype_nz=mype_lend-mype_lbegin+1
           startloc=(/1,1,mype_lbegin,1/)
           countloc=(/mype_nx,mype_ny,mype_nz,1/)

           iret=nf90_inq_varid(ncioid,trim(adjustl(mype_varname)),var_id)
           if(mype_vartype==5) then
              call ncvgt(ncioid,var_id,startloc,countloc,tmpd3r4,iret)
              d3r4_mean(:,:,mype_lbegin:mype_lend)=d3r4_mean(:,:,mype_lbegin:mype_lend)+tmpd3r4(:,:,:,1)
              d4r4(:,:,mype_lbegin:mype_lend,iens)=tmpd3r4(:,:,:,1)
           elseif(mype_vartype==6) then
              call ncvgt(ncioid,var_id,startloc,countloc,tmpd3r8,iret)
              d3r4_mean(:,:,mype_lbegin:mype_lend)=d3r4_mean(:,:,mype_lbegin:mype_lend)+tmpd3r8(:,:,:)
              d4r4(:,:,mype_lbegin:mype_lend,iens)=tmpd3r8(:,:,:)
           endif
        !enddo  ! ilev

        iret=nf90_close(ncioid)

       ! do ilev=mype_lbegin,mype_lend
       !    write(6,'(I5,A10,2I5,2f15.7)') mype_fileid,trim(adjustl(mype_varname)),ilev,iens,  &
       !            maxval(d4r4(:,:,ilev,iens)),minval(d4r4(:,:,ilev,iens))
       ! enddo  ! ilev

     enddo ! iens
!
     if(mype_vartype==5) then
        deallocate(tmpd3r4)
     elseif(mype_vartype==6) then
        deallocate(tmpd3r8)
     else
        write(6,*) 'Warning, unknown datatype'
     endif
!
!  calculate ensemble mean
!
     d3r4_mean=d3r4_mean*average
     do ilev=mype_lbegin,mype_lend
        write(6,'(I5,A10,I5,2f20.7)') mype_fileid,trim(adjustl(mype_varname)),ilev,  &
                   maxval(d3r4_mean(:,:,ilev)),minval(d3r4_mean(:,:,ilev))
     enddo  ! ilev

     deallocate(d3r4_mean)
     deallocate(d4r4)

  endif

  call mpi_barrier(MPI_COMM_WORLD,ierror)
  if(mype==0)  write(6,*) "=== RRFS ENS MEAN and RECENTER SUCCESS ==="
  call MPI_FINALIZE(ierror)
!

END PROGRAM ens_mean_recenter

